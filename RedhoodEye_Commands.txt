RedhoodEye - Advanced Network Scanner
Best Command Examples (Without Proxy)
=====================================

SAFETY WARNING:
===============
- Large scans (>10,000 ports) with high thread counts (>200) are automatically limited to 200 threads
- This prevents system overload and resource exhaustion
- Warning message: "Thread count limited to 200 for large scan" indicates safety feature is active

MOST COMPLETE COMMAND (RECOMMENDED):
=====================================
python RedhoodEye.py --target 192.168.1.1 --ports 1-1000 --threads 200 --timeout 3 --verbose --output results.json --format json

This command provides:
- Wide port range (1-1000 covers most common services)
- Optimal threading (200 threads for good performance)
- Reasonable timeout (3 seconds balances speed vs accuracy)
- Verbose output (detailed information)
- JSON output (structured data for analysis)
- Results saved to file
- Safe thread count (won't trigger limitation)

COMPREHENSIVE NETWORK SCAN:
===========================
python RedhoodEye.py --target 192.168.1.1 --ports 1-65535 --threads 500 --timeout 3 --verbose --output full_scan.json --format json
NOTE: This will trigger thread limitation to 200 threads for safety

FAST BUT THOROUGH SCAN:
=======================
python RedhoodEye.py --target example.com --ports common --threads 200 --timeout 2 --verbose --output quick_scan.csv --format csv

NETWORK DISCOVERY + PORT SCAN:
==============================
python RedhoodEye.py --target 192.168.1.0/24 --ports 1-1000 --threads 100 --timeout 3 --verbose --output network_scan.html --format html

SERVICE DETECTION FOCUS:
========================
python RedhoodEye.py --target 10.0.0.1 --ports web,database,mail --threads 150 --timeout 5 --verbose --output services.json --format json

QUICK SECURITY ASSESSMENT:
==========================
python RedhoodEye.py --target target.com --ports 21,22,23,25,53,80,110,143,443,993,995,1433,3306,3389,5432,8080 --threads 100 --timeout 3 --verbose

SYSTEM INFORMATION + WHOIS:
===========================
python RedhoodEye.py --target google.com --how-is
python RedhoodEye.py --target 192.168.1.1 --how-is --ports 80-443
python RedhoodEye.py --target example.com --how-is --no-port-check

FOR DIFFERENT SCENARIOS:
========================

QUICK CHECK:
-----------
python RedhoodEye.py --target 192.168.1.1 --ports common --threads 50 --timeout 2

DEEP SCAN:
----------
python RedhoodEye.py --target 192.168.1.1 --ports 1-65535 --threads 500 --timeout 5 --verbose --output deep_scan.html --format html
NOTE: Threads will be limited to 200 for safety

NETWORK DISCOVERY:
-----------------
python RedhoodEye.py --target 192.168.1.0/24 --ports 80,443,22,21 --threads 100 --timeout 3 --verbose

WEB SERVICES SCAN:
-----------------
python RedhoodEye.py --target example.com --ports web --threads 100 --timeout 3 --verbose --output web_scan.json --format json

DATABASE SERVICES SCAN:
----------------------
python RedhoodEye.py --target 192.168.1.100 --ports database --threads 50 --timeout 5 --verbose --output db_scan.json --format json

MAIL SERVICES SCAN:
-------------------
python RedhoodEye.py --target mail.example.com --ports email --threads 50 --timeout 5 --verbose --output mail_scan.json --format json

REMOTE ACCESS SCAN:
------------------
python RedhoodEye.py --target 192.168.1.1 --ports remote --threads 50 --timeout 5 --verbose --output remote_scan.json --format json

FILE SERVICES SCAN:
------------------
python RedhoodEye.py --target 192.168.1.1 --ports file --threads 50 --timeout 5 --verbose --output file_scan.json --format json

CUSTOM PORT RANGE:
-----------------
python RedhoodEye.py --target 192.168.1.1 --ports 1000-2000 --threads 150 --timeout 3 --verbose --output custom_scan.json --format json

MULTIPLE TARGETS:
-----------------
python RedhoodEye.py --target 192.168.1.1,192.168.1.2,192.168.1.3 --ports 1-1000 --threads 100 --timeout 3 --verbose --output multi_scan.json --format json

SUBNET SCAN:
------------
python RedhoodEye.py --target 10.0.0.0/16 --ports 80,443,22 --threads 200 --timeout 2 --verbose --output subnet_scan.json --format json

QUIET SCAN (NO BANNER):
-----------------------
python RedhoodEye.py --target 192.168.1.1 --ports 1-1000 --threads 100 --timeout 3 --no-banner --output quiet_scan.json --format json

CSV OUTPUT:
-----------
python RedhoodEye.py --target 192.168.1.1 --ports 1-1000 --threads 100 --timeout 3 --output results.csv --format csv

HTML OUTPUT:
-----------
python RedhoodEye.py --target 192.168.1.1 --ports 1-1000 --threads 100 --timeout 3 --output results.html --format html

JSON OUTPUT:
-----------
python RedhoodEye.py --target 192.168.1.1 --ports 1-1000 --threads 100 --timeout 3 --output results.json --format json

UDP SCAN:
---------
python RedhoodEye.py --target 192.168.1.1 --ports 53,123,161,162 --scan-type udp --threads 50 --timeout 5 --verbose --output udp_scan.json --format json

STEALTH SCAN (RATE LIMITED):
============================
python RedhoodEye.py --target 192.168.1.1 --ports 1-1000 --rate-limit 10 --randomize --threads 50 --timeout 3 --verbose --output stealth_scan.json --format json

FAST SCAN MODE:
===============
python RedhoodEye.py --target 192.168.1.1 --fast-scan --threads 200 --timeout 2 --verbose --output fast_scan.json --format json

BANNER TIMEOUT OPTIMIZATION:
============================
python RedhoodEye.py --target 192.168.1.1 --banner-timeout 0.5 --threads 100 --timeout 3 --verbose --output optimized_scan.json --format json

SHOW CLOSED PORTS:
==================
python RedhoodEye.py --target 192.168.1.1 --ports 1-1000 --show-closed --verbose --threads 100 --timeout 3 --output detailed_scan.json --format json

LOGGING FEATURES:
=================
python RedhoodEye.py --target 192.168.1.1 --log-file scan.log --log-level DEBUG --threads 100 --timeout 3 --verbose
python RedhoodEye.py --target 192.168.1.1 --no-colors --threads 100 --timeout 3 --verbose

SCHEDULED SCANNING:
===================
python RedhoodEye.py --target 192.168.1.1 --schedule "0 2 * * *" --job-id daily_scan --ports 1-1000 --threads 100
python RedhoodEye.py --target 192.168.1.1 --schedule daily --job-id daily_scan --ports common --threads 50
python RedhoodEye.py --target 192.168.1.1 --schedule hourly --job-id hourly_scan --ports web --threads 50
python RedhoodEye.py --list-jobs
python RedhoodEye.py --remove-job daily_scan

PERFORMANCE OPTIMIZATION:
========================

FOR SPEED:
----------
python RedhoodEye.py --target 192.168.1.1 --ports 1-1000 --threads 200 --timeout 1 --fast-scan --banner-timeout 0.5 --verbose

FOR RELIABILITY:
----------------
python RedhoodEye.py --target 192.168.1.1 --ports 1-1000 --threads 50 --timeout 10 --verbose

FOR STEALTH:
------------
python RedhoodEye.py --target 192.168.1.1 --ports 1-1000 --threads 20 --timeout 5 --rate-limit 5 --randomize --verbose

FOR COMPREHENSIVE ANALYSIS:
===========================
python RedhoodEye.py --target 192.168.1.1 --ports all --threads 200 --timeout 3 --verbose --output comprehensive_scan.html --format html
NOTE: This will trigger thread limitation to 200 threads for safety

SAFETY RECOMMENDATIONS:
=======================
- Use thread counts <= 200 for most scans
- Monitor system resources during large scans
- Use appropriate timeouts based on network conditions
- Enable logging for troubleshooting
- Use predefined port sets for common scenarios
- Consider rate limiting for stealth operations 